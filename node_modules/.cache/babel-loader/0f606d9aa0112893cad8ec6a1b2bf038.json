{"ast":null,"code":"var _jsxFileName = \"/home/mark/Documents/Projects/personalfinance testing/client/src/components/PieChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { DataContext } from '../contexts/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PieChart = () => {\n  _s();\n\n  const {\n    data\n  } = useContext(DataContext);\n  const expenses = data.filter(e => !e.isincome);\n  const incomes = data.filter(e => e.isincome);\n  let totalExpense = 0;\n  let totalIncome = 0;\n  incomes.forEach(e => totalIncome = parseInt(totalIncome) + parseInt(e.total));\n  expenses.forEach(e => totalExpense = parseInt(totalExpense) + parseInt(e.total));\n  let chartData = {};\n  const options = {\n    plugins: {\n      tooltip: {\n        bodyFont: {\n          size: 18\n        }\n      },\n      legend: {\n        labels: {\n          color: 'white',\n          font: {\n            size: 20\n          }\n        },\n        borderWidth: 0\n      }\n    },\n    elements: {\n      arc: {\n        borderWidth: 2\n      }\n    }\n  };\n  chartData = {\n    fontColor: 'white',\n    font: {\n      size: 20\n    },\n    labels: [\"Expenses\", \"Remaining\"],\n    datasets: [{\n      borderColor: '#474b4f',\n      label: 'transactions',\n      data: [totalExpense, totalIncome - totalExpense],\n      backgroundColor: ['#ff0000', 'white']\n    }]\n  };\n\n  if (totalIncome - totalExpense < 0) {\n    chartData = {\n      fontColor: 'white',\n      font: {\n        size: 20\n      },\n      labels: [\"Expenses\", \"Remaining\"],\n      datasets: [{\n        borderColor: '#474b4f',\n        label: 'transactions',\n        data: [totalExpense, 0],\n        backgroundColor: ['#ff0000', 'white']\n      }]\n    };\n  }\n\n  if (totalExpense + totalIncome > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts\",\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: chartData,\n        height: 100,\n        width: 100,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"empty-graph\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Add an Income/Expense for a Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(PieChart, \"QJS6t11u02ggeA9mw1/uTWbSnN8=\");\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"sources":["/home/mark/Documents/Projects/personalfinance testing/client/src/components/PieChart.js"],"names":["React","useContext","useState","useEffect","Doughnut","DataContext","PieChart","data","expenses","filter","e","isincome","incomes","totalExpense","totalIncome","forEach","parseInt","total","chartData","options","plugins","tooltip","bodyFont","size","legend","labels","color","font","borderWidth","elements","arc","fontColor","datasets","borderColor","label","backgroundColor"],"mappings":"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","sourcesContent":["import React,{useContext, useState, useEffect} from 'react'\nimport { Doughnut } from 'react-chartjs-2';\nimport {DataContext} from '../contexts/DataContext';\n\n\n\nexport const PieChart = () => {\n\n    const {data} = useContext(DataContext);\n    const expenses = data.filter((e)=>!e.isincome);\n    const incomes = data.filter((e)=>e.isincome);\n    let totalExpense = 0;\n    let totalIncome = 0;\n    incomes.forEach(e => totalIncome = parseInt(totalIncome)  + parseInt(e.total) );\n    expenses.forEach(e=> totalExpense = parseInt(totalExpense)  + parseInt(e.total) );\n    let chartData = {};\n  \n    const options = {\n        plugins:{\n            tooltip:{\n                bodyFont:{\n                    size:18\n                }\n            },\n            legend:{\n                labels:{\n                    color: 'white',\n                    font:{\n                        size: 20\n                    }\n                },\n                borderWidth: 0\n            }\n        },\n        elements: {\n          arc: {\n            borderWidth: 2\n          }\n        }\n      };\n\n        chartData = {\n            fontColor:'white',\n            font:{size: 20},\n            labels:[\"Expenses\",\"Remaining\"],\n            datasets:[{\n                borderColor:'#474b4f',\n                label:'transactions',\n                data:[totalExpense,(totalIncome-totalExpense)],\n                backgroundColor:['#ff0000','white'],\n                \n            }]\n        }\n        if(totalIncome-totalExpense < 0){\n            chartData = {\n                fontColor:'white',\n                font:{size: 20},\n                labels:[\"Expenses\",\"Remaining\"],\n                datasets:[{\n                    borderColor:'#474b4f',\n                    label:'transactions',\n                    data:[totalExpense,(0)],\n                    backgroundColor:['#ff0000','white'],\n                    \n                }]\n            }\n\n        }\n    \n   \n    \n    if(totalExpense+totalIncome >0){\n        return (\n                <div className=\"charts\">\n                    <Doughnut\n                    data={chartData}\n                    height={100}\n                    width={100}\n                    options={options}\n                    />\n                </div>\n            )\n\n    }    \n    else{\n        return(\n            <div class=\"empty-graph\">\n                <h5>Add an Income/Expense for a Graph</h5>\n            </div>\n        )\n    }\n    \n   \n}\n\nexport default PieChart;\n\n"]},"metadata":{},"sourceType":"module"}